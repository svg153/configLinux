# What protocol to use when performing git operations. Supported values: ssh, https
git_protocol: https
# What editor gh should run when creating issues, pull requests, etc. If blank, will refer to environment.
editor:
# When to interactively prompt. This is a global config that cannot be overridden by hostname. Supported values: enabled, disabled
prompt: enabled
# A pager program to send command output to, e.g. "less". Set the value to "cat" to disable the pager.
pager:
# Aliases allow you to create nicknames for gh commands
# Examples:
#  * https://gist.github.com/vilmibm/a1b9a405ac0d5153c614c9c646e37d13
#  * https://github.com/vEnhance/dotfiles/blob/main/gh-config.yml
#  * https://github.com/aaronpowell/system-init/blob/master/common/gh-config.yml
#  * https://github.com/cli/cli/issues/1200#issuecomment-659921986
aliases:
    aliases: alias list
    co: pr checkout # this alias is shipped by default
    prs: pr list
    prv: pr view
    pro: pr checkout
    prc: pr create
    prci: |-
        !(
            branch_name=$(git rev-parse --abbrev-ref HEAD)
            wi_id=$(echo ${branch_name} | awk -F'_' '{print $1}')
            wi_title=$(echo ${branch_name} | awk -F'_' '{print $2}')
            
            pr_title="${wi_id} ${wi_title}"
            gh prc --title "${pr_title}" --body "${wi_id}" --draft
        )
    pr-auto-approved: |-
        !(
            branch_name=$(git rev-parse --abbrev-ref HEAD)
            gh pr review \
                ${branch_name} \
                --approve \
                --comment \"approved from gh cli\"
        )
    pr-merge: |-
        !(
            branch_name=$(git rev-parse --abbrev-ref HEAD)
            gh pr merge \
                ${branch_name} \
                --auto \
                --squash \
                --delete-branch
        )
    codespaces: codespace list
    configs: config list
    clo: repo clone "$1"/"$2"
    repos: repo list
    repos-name-all: |-
        !(
            user=${1:-$USER}
            gh api --paginate graphql -f owner="${user}" -f query='
                query($owner: String!, $per_page: Int = 100, $endCursor: String) {
                    repositoryOwner(login: $owner) {
                        repositories(first: $per_page, after: $endCursor, ownerAffiliations: OWNER) {
                            nodes { name }
                            pageInfo { hasNextPage endCursor }
                        }
                    }
                }
            ' | jq -r '.data.repositoryOwner.repositories.nodes[].name' | sort
        )
    repo-dependabot-alerts: |-
        !(
            user=${1:-$USER}
            repo=${2:-$REPO}
            gh api --paginate graphql -f owner="${user}" -f name="${repo}" -f query='
                query($owner: String!, $name: String!, $per_page: Int = 100, $endCursor: String) {
                    repository(owner: $owner, name: $name) {
                        vulnerabilityAlerts(first: $per_page, after: $endCursor) {
                            nodes {
                                createdAt
                                dismissedAt
                                securityVulnerability {
                                    package {
                                        name
                                    }
                                    advisory {
                                        description
                                    }
                                }
                            }
                            pageInfo { hasNextPage endCursor }
                        }
                    }
                }
            '
        )
    repos-name: |-
        !(
            user=${1:-$USER}
            gh repo list "${user}" --limit 9999 --json "name" --jq ".[].name"
        )
    # https://github.com/matt-bartel/gh-clone-org
    clo-org: clone-org
    clone-repos-all: |-
        !(
            user=${1:-$USER}
            gh repos-name-all "${user}" | xargs -I '%' gh repo clone ${user}/%
        )
    clone-all-repos: |-
        !(
            user=${1:-$USER}
            gh clone-repos-all ${user}
        )
    issues: issue list
    releases: release list
    runs: run list
    runs-branch: run list --branch=$(git branch --show)
    secrets: secret list
    ssh-keys: ssh-key list
    workflows: workflow list
    list-milestones: |-
        api graphql -F owner=':owner' -F name=':repo' -f query='
            query ListMilestones($name: String!, $owner: String!) {
                repository(owner: $owner, name: $name) {
                    milestones(first: 100) {
                        nodes {
                            title
                            number
                            description
                            dueOn
                            url
                            state
                            closed
                            closedAt
                            updatedAt
                        }
                    }
                }
            }
        '
    lm: |-
        !(
            gh list-milestones | jq '.data.repository.milestones.nodes[]'
        )
    rate-limit: |-
        !(
            gh api \
                -H "Accept: application/vnd.github.v3+json" \
                /rate_limit
        )
    rate-limit-table: |-
        !(
            gh api \
                -H "Accept: application/vnd.github.v3+json" \
                /rate_limit \
            | jq '.resources' \
            | jq -r '(["LIMIT","USED","REMAINING","RESET"] | (., map(length*"-"))), (.[] | [.limit, .used, .remaining, .reset]) | @tsv'
        )

# The path to a unix socket through which send HTTP connections. If blank, HTTP traffic will be handled by net/http.DefaultTransport.
http_unix_socket:
# What web browser gh should use when opening URLs. If blank, will refer to environment.
browser:
